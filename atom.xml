<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>生而知之，困而知之</title>
  <subtitle>深情妙悟著文章</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://51explore.com/"/>
  <updated>2017-09-04T05:09:21.000Z</updated>
  <id>http://51explore.com/</id>
  
  <author>
    <name>五条</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>EventBus详解和使用</title>
    <link href="http://51explore.com/2017/09/04/EventBus%E8%AF%A6%E8%A7%A3%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>http://51explore.com/2017/09/04/EventBus详解和使用/</id>
    <published>2017-09-04T05:00:01.000Z</published>
    <updated>2017-09-04T05:09:21.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>EventBus</strong>是一款针对Android优化的发布/订阅事件总线。</p>
<ul>
<li><strong>特点</strong>: 主要功能是替代Intent,Handler,BroadCast在Fragment，Activity，Service，线程之间传递消息。</li>
<li><strong>优点</strong>: 优点是开销小，代码更优雅。以及将发送者和接收者解耦。<a id="more"></a>
</li>
</ul>
<h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><pre><code>/**
 * eventBus 注册
 * 子类可实现 该方法
 */
public void registerComponent() {}

/**
 * eventBus 注销
 * 子类可实现 该方法
 */
public void unRegisterComponent() {}
</code></pre><ul>
<li><strong>作用</strong>: 在子类activity和fragment 中实现该方法，不用关心 注册、注释和其生命周期的关系</li>
</ul>
<h3 id="流程图-BaseActivity"><a href="#流程图-BaseActivity" class="headerlink" title="流程图:BaseActivity"></a>流程图:BaseActivity</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">st=&gt;start: onCreate</div><div class="line">e=&gt;end</div><div class="line">op=&gt;operation: registerComponent</div><div class="line">st-&gt;op-&gt;cond</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">st=&gt;start: onDestroy</div><div class="line">e=&gt;end</div><div class="line">op=&gt;operation: unRegisterComponent</div><div class="line">st-&gt;op-&gt;cond</div></pre></td></tr></table></figure>
<p>###时序图:子类activity</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">A-&gt;B: post(event)</div><div class="line">Note right of B: 互相发送消息</div><div class="line">B--&gt;A: post(event)</div></pre></td></tr></table></figure>
<h3 id="代码块：发送事件"><a href="#代码块：发送事件" class="headerlink" title="代码块：发送事件"></a>代码块：发送事件</h3><pre><code>CustomerBusEvent customerBusEvent = new  CustomerBusEvent(CustomerBusEvent.ACTION_CUSTOMER_NAME_STRING);
            customerBusEvent.setCustomerName(&quot;设置客户名称消息&quot;);
            BusProvider.getInstance().postSticky(customerBusEvent);
</code></pre><blockquote>
<p><strong>注意：</strong>postSticky(event)是发送粘性事件，大部分情况下使用post(event)</p>
</blockquote>
<h3 id="代码块：接收事件"><a href="#代码块：接收事件" class="headerlink" title="代码块：接收事件"></a>代码块：接收事件</h3><pre><code> /**
 * 不管从哪个线程发出的事件，MAIN模式都会在UI（主线程）线程执行onMessageEventMain()方法， 在这里可以更新UI的操作，不可以执行耗时的操作
 * @param backBusEvent
 */
@Subscribe(threadMode = ThreadMode.MAIN, priority = 1)
public void updateButton(BackBusEvent backBusEvent){
    if(backBusEvent != null){
        String action = backBusEvent.getAction();
        if(TextUtils.isEmpty(action)){
            return;
        }

        Log.d(&quot;++++++运行在Button哪个线程：&quot;,Thread.currentThread().getName());
        if(action.equals(BackBusEvent.ACTION_CUSTOMER_NAME_BACK)){
            btn_customer.setText(backBusEvent.getCustomerNameBack());
        }else if(action.equals(BackBusEvent.ACTION_BUSINESS_NAME_BACK)){
            btn_business.setText(backBusEvent.getBusinessNameBack());
        }
    }
}

/**
 * 不管从哪个线程发出的事件，ASYNC模式都会创建一个新的子线程来执行onEventAsync()方法，所以在这里不能执行更新UI的操作，可以执行耗时的操作
 * @param backBusEvent
 */
@Subscribe(threadMode = ThreadMode.ASYNC, priority = 4)
public void updateUI(BackBusEvent backBusEvent){
    if(backBusEvent != null){
        String action = backBusEvent.getAction();
        if(TextUtils.isEmpty(action)){
            return;
        }

        Log.d(&quot;++++++运行在updateUI哪个线程：&quot;,Thread.currentThread().getName());
        if(action.equals(BackBusEvent.ACTION_CUSTOMER_NAME_BACK)){
            btn_customer.setText(backBusEvent.getCustomerNameBack());
        }else if(action.equals(BackBusEvent.ACTION_BUSINESS_NAME_BACK)){
            btn_business.setText(backBusEvent.getBusinessNameBack());
        }
    }
}

/**
 * 事件从哪个线程发布出来的，onMessageEventPost()方法就会在该线程中运行， 如果发送事件的线程是UI线程，则在UI线程执行， 如果发送事件的线程是子线程，则在该子线程中执行
 * @param backBusEvent
 */
@Subscribe(threadMode = ThreadMode.POSTING, priority = 2,sticky = true)
public void updateMethod(BackBusEvent backBusEvent){
    if(backBusEvent != null){
        String action = backBusEvent.getAction();
        if(TextUtils.isEmpty(action)){
            return;
        }

        Log.d(&quot;++++++运行在Method哪个线程：&quot;,Thread.currentThread().getName());
        if(action.equals(BackBusEvent.ACTION_CUSTOMER_NAME_BACK)){
            btn_customer.setText(backBusEvent.getCustomerNameBack());
        }else if(action.equals(BackBusEvent.ACTION_BUSINESS_NAME_BACK)){
            btn_business.setText(backBusEvent.getBusinessNameBack());
        }
    }
}
</code></pre><ul>
<li><strong>讲解：</strong>从上面的代码，我们可以看到，EventBus是怎么接收消息的，是根据参数中类的实例的类型的判定的，所以当如果我们在接收时，同一个类的实例参数有两个函数来接收会怎样？答案是，这两个函数都会执行。<br>   我定义了 3个event</li>
</ul>
<p>###priority事件优先级<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//priority越大，级别越高</span></div><div class="line"> <span class="meta">@Subscribe</span>(priority = <span class="number">1</span>);</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent</span><span class="params">(MessageEvent event)</span> </span>&#123;</div><div class="line"> …</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>###混淆<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">-keepattributes *Annotation*</div><div class="line">-keepclassmembers <span class="class"><span class="keyword">class</span> ** </span>&#123;</div><div class="line">    <span class="meta">@org</span>.greenrobot.eventbus.Subscribe &lt;methods&gt;;</div><div class="line">&#125;</div><div class="line">-keep <span class="keyword">enum</span> org.greenrobot.eventbus.ThreadMode &#123; *; &#125;</div><div class="line">#Only required if you use AsyncExecutor</div><div class="line">-keepclassmembers <span class="class"><span class="keyword">class</span> * <span class="keyword">extends</span> <span class="title">org</span>.<span class="title">greenrobot</span>.<span class="title">eventbus</span>.<span class="title">util</span>.<span class="title">ThrowableFailureEvent</span> </span>&#123;</div><div class="line">    &lt;init&gt;(java.lang.Throwable);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>###总结：<br>EventBus的耦合太低了，如果不加以控制管理，你会不知道，你发的消息到跑哪里去了。也不知道你的这条消息，会在哪里发出。</p>
<p>###建议：<br>不同的业务模块一定要作为一个事件封装，具体需要考虑业务情景跟代码情况，比如事件行为不同、事件生命周期不同，如果有必要，写封装成两个Event可能是更好的选择。比如：客户模块 写一个CustomerBusEvent、生意模块 写一个 BusinessBusEvent</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;EventBus&lt;/strong&gt;是一款针对Android优化的发布/订阅事件总线。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;特点&lt;/strong&gt;: 主要功能是替代Intent,Handler,BroadCast在Fragment，Activity，Service，线程之间传递消息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;: 优点是开销小，代码更优雅。以及将发送者和接收者解耦。
    
    </summary>
    
    
      <category term="EventBus 事件总线 android 发消息 解耦" scheme="http://51explore.com/tags/EventBus-%E4%BA%8B%E4%BB%B6%E6%80%BB%E7%BA%BF-android-%E5%8F%91%E6%B6%88%E6%81%AF-%E8%A7%A3%E8%80%A6/"/>
    
  </entry>
  
  <entry>
    <title>Android列表List多选何单选实现</title>
    <link href="http://51explore.com/2017/08/06/Android%E5%88%97%E8%A1%A8List%E5%A4%9A%E9%80%89%E4%BD%95%E5%8D%95%E9%80%89%E5%AE%9E%E7%8E%B0/"/>
    <id>http://51explore.com/2017/08/06/Android列表List多选何单选实现/</id>
    <published>2017-08-06T12:01:11.000Z</published>
    <updated>2017-09-04T04:58:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>   最近 在做项目中，遇到做一个多选列表的需求。无论是 久经沙场的撸主还是，初出茅庐的小鲜肉，都会在网上百度好多资料，去完成这个需求。其实，sdk里面有apidemo 完全可以帮我们解决这个问题。<br><a id="more"></a><br>下面让我们 一起去看一下。<br>  *CheckedTextView（可以参考代码）,一般情况下，我们会用textView何CheckBox拼装起来 使用。其实在api里面有一个类 CheckedTextView，可以帮我们实现这个效果，并且通过设置参数，来决定 是 单选列表 还是多选列表 </p>
<pre><code>   * 单选列表设置：
    listView.setChoiceMode(ListView.CHOICE_MODE_SINGLE);
   * 多选列表设置：
    listView.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);
   * 在布局文件里展示 checkbox:
    android:checkMark=&quot;?android:attr/listChoiceIndicatorMultiple&quot;
   * 在布局文件里展示 radiobutton:
    android:checkMark=&quot;?android:attr/listChoiceIndicatorSingle&quot;
   * 有的时候 ui设计师给我们的效果图，选择框（checkbox在 列表的左侧），在这里就要用到 下面的 参数了
     android:drawableLeft=&quot;?android:attr/listChoiceIndicatorSingle&quot;
     android:drawableLeft=&quot;?android:attr/listChoiceIndicatorMultiple&quot;

   * 这里需要注意一个 api的兼容性问题：
    下面 参数 需要最低版本 是api17
    android:paddingStart=&quot;?android:attr/listPreferredItemPaddingStart&quot;     android:paddingEnd=&quot;?android:attr/listPreferredItemPaddingEnd&quot;
   * 如果，您的项目最低版本是 15 （大部分的项目设置），要用一下设置
    android:paddingLeft
    android:paddingRight

listActivity 参考api里面的listActivity实现，继承AppCompatActivity。分别实现 activity生命周期的 几个方法：
    onRestoreInstanceState
    onContentChanged
    onContentChanged()是Activity中的一个回调方法
    当Activity的布局改动时，即setContentView()或者addContentView()方法执行完毕时就会调用该方法 
</code></pre><p><em>列表数据的 初始化 和 获取，请参考demo 代码<br>demo里面的列表 是 用listview实现！如果有时间 可以替换为 RecycleView
</em><a href="https://github.com/zjiayingok/ListSelectDemo-master" target="_blank" rel="external">demo下载地址：</a></p>
<p>各位大神多提 意见 后期还会维护</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;   最近 在做项目中，遇到做一个多选列表的需求。无论是 久经沙场的撸主还是，初出茅庐的小鲜肉，都会在网上百度好多资料，去完成这个需求。其实，sdk里面有apidemo 完全可以帮我们解决这个问题。&lt;br&gt;
    
    </summary>
    
    
      <category term="多选列表 单选列表 Android List CheckBox RadioButton CheckedTextView" scheme="http://51explore.com/tags/%E5%A4%9A%E9%80%89%E5%88%97%E8%A1%A8-%E5%8D%95%E9%80%89%E5%88%97%E8%A1%A8-Android-List-CheckBox-RadioButton-CheckedTextView/"/>
    
  </entry>
  
  <entry>
    <title>正确的定位自己</title>
    <link href="http://51explore.com/2017/08/04/%E6%AD%A3%E7%A1%AE%E7%9A%84%E5%AE%9A%E4%BD%8D%E8%87%AA%E5%B7%B1/"/>
    <id>http://51explore.com/2017/08/04/正确的定位自己/</id>
    <published>2017-08-03T23:23:13.000Z</published>
    <updated>2017-08-07T11:48:51.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>孔子曰：“生而知之者，上也；学而知之者，次也；困而学之，又其次也；困而不学，&gt;民斯为下矣。 唐·韩愈《师说》：“人非生而知之者，孰能无惑。”
</code></pre><a id="more"></a>
<pre><code>根据天赋和学习态度来划分的四个等级。 生而知之者是最上等求知方式，因为自身具&gt;有的好奇和兴趣，本能地在生活体验中，通过实践，获取知识。 学而知之者是一般勤奋好&gt;学的人，天赋虽然没有什么特殊的地方，但通过刻苦学习理论知识，仍然可以读大学，做研
</code></pre><p>究生等成为有用的人才。这是第二等级的人。困而知之者是在生活或工作中遇到困难时，为<br>解除疑难问题，而努力求知学习的人，“书到用时方恨少。”这种人，作个不恰当的比拟，有<br>点像我们今天读电大，成人自修大学或职工夜大一类学校的人。按照孔子的看法，属于第三<br>等级的人。 最后还有一种困而不学的人。明明已经在生活与工作中感到非常困难了，却仍&gt;然不愿意花费时间和精力在学习上，而是以滥为滥，打牌喝酒“混”日子。这种人，按照孔子<br>的看法，是属于最下等的不可救药的人。 既然有这样四个等级的划分，那么，孔子自己属&gt;于哪个等级的人呢？以我们的看法，他当然应该属于天才的级别，是生而知之的了。可他自<br>己却并不这样认为，在《述而》篇里，他曾说过：“我非生而知之者，好古，敏以求之者也&gt;。”可见，他自己排队是在第二个等级里，也就是学而知之的人。 圣人如此，我们自己对号<br>入座，又该属于哪一等呢？  </p>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;孔子曰：“生而知之者，上也；学而知之者，次也；困而学之，又其次也；困而不学，&amp;gt;民斯为下矣。 唐·韩愈《师说》：“人非生而知之者，孰能无惑。”
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
